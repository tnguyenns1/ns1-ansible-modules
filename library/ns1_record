#!/usr/bin/python
#
# (c) 2015, Che Ruisi-Besares <cruisibesares@nsone.net>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = """
module: ns1_record
short_description: "Add, modify & delete nsone hosted DNS records."
description:
 - This module is a light wrapper around the nsone api that allows for the
   creation, modification, and deletion of nsone record objects.
 - Additional record attributes can be passed to the module as documented below.
 - "See http://nsone.net for more details."
requirements:
  - "python >= 2.6"
  - ns1-python >= 0.9.18
version_added: "1.9.3"
author: "Che Ruisi-Besares"
options:
    state:
        description:
          - create or destroy the record, defaults to present. There is no
            difference between present and active or absent and deleted.
        required: true
        choices: ['present', 'active', 'absent', 'deleted']
    apiKey:
        description:
          - Unique client api key that can be created via the nsone portal.
        required: true
    name:
        description:
          - The subdomain of the record. www for example.
        required: true
    zone:
        description:
          - the zone domain name for example example.com
        required: true
    answers:
        description:
          - This is the nsone answer object for this record. This can take
            Many forms depending on record type and desired effect. See
            https://nsone.net/api/ for more details. As a note you can pass
            an array or hash object via yml and it will passed directly to the
            api.
        required: true
    ignore_missing_zone:
        description:
          - If you try to delete a record from a zone that has already been
            deleted it will error. There are situations in which the user might
            not care if the zone isn't there and just wants to ensure the record
            is missing. In this case you can set this flag to True. This module
            will then count any record that doesn't have a zone as absent.
        required: false
        default: False
    type:
        description:
          - This is the record type of the record.
        required: True
        choices:
          - A
          - AAAA
          - ALIAS
          - AFSDB
          - CNAME
          - DNAME
          - HINFO
          - MX
          - NAPT
          - NS
          - PTR
          - RP
          - SPF
          - SRV
          - TXT
    use_client_subnet:
        description:
          - direct pass through of the use_client_subnet record flag.
        required: false
        default: None
    meta:
        description:
          - Record level meta data.
        required: false
        default: None
    link:
        description:
          - Creates a linked record.
        required: false
        default: None
    filters:
        description:
          - The filters object for the record. This has many forms depending on
            the desired effect. Please read the notes section of the readme
            accepted forms.
        required: false
        default: None
    ttl:
        description:
          - ttl of the record.
        required: false
        default: 3600
    regions:
        description:
          - The regions object for the record set.
        required: false
        default: None
"""

EXAMPLES = '''
   - name: record creation
        local_action:
          module: ns1_record
          apiKey: "{{ key }}"
          name: www
          zone: "{{ test_zone }}"
          state: present
          type: A
          answers:
            - answer:
                - 192.168.1.0
              meta:
                up: True
            - answer:
                - 192.168.1.1
              meta:
                up: True
          filters:
            - filter: up
              config: {}
        register: return

      - name: record delete
        local_action:
          module: ns1_record
          apiKey: "{{ key }}"
          name: www
          zone: "{{ test_zone }}"
          state: absent
          type: A
          answers: []
        register: return
'''


try:
    from ns1 import NS1, Config
    from ns1.rest.errors import ResourceException
    HAS_NS1 = True
except ImportError:
    HAS_NS1 = False

CREATE_STATES = ['present', 'active']
DELETE_STATES = ['absent', 'deleted']

STATES = CREATE_STATES + DELETE_STATES

RECORD_KEYS = [
    'use_client_subnet',
    'answers',
    'meta',
    'link',
    'filters',
    'ttl',
    'regions'
]

RECORD_KEYS_WITHOUT_ANSWERS = [
    'use_client_subnet',
    'meta',
    'link',
    'filters',
    'ttl',
    'regions'
]

RECORD_KEYS = RECORD_KEYS_WITHOUT_ANSWERS + ['answers']

TYPES = [
    'A',
    'AAAA',
    'ALIAS',
    'AFSDB',
    'CNAME',
    'DNAME',
    'HINFO',
    'MX',
    'NAPTR',
    'NS',
    'PTR',
    'RP',
    'SPF',
    'SRV',
    'TXT'
]

def errback_generator(module):
    def errback(args):
        module.fail_json(
            msg="%s - %s" % (args[0], args[1])
        )
    return errback

def api_params(module):
    toReturn = {}
    for i in RECORD_KEYS_WITHOUT_ANSWERS:
        if module.params.get(i) is not None:
            toReturn[i] = module.params.get(i)
    return toReturn

def clean(d):
    if isinstance(d, dict):
        for key,val in d.items():
            if isinstance(val, dict) or isinstance(val, list):
                val = clean(val)
            if key == 'id':
                del d[key]
    if isinstance(d, list):
        for i in d:
            if isinstance(i, dict) or isinstance(i, list):
                i = clean(i)
    return d


def get_zone(ns1, module):
    to_return = None
    try:
        to_return = ns1.loadZone(module.params.get('zone'))
    except ResourceException as re:
        if re.response.code == 404:
            if ( module.params.get('ignore_missing_zone') and
                module.params.get('state') in DELETE_STATES):
                # zone not found but we are in the delete state
                # and the user doesn't care that the zone doesn't exist
                # nothing to do and no change
                module.exit_json(changed=False)
        else:
            # generic error or user cares about missing zone
            module.fail_json(
                msg="error code %s - %s " % ( re.response.code, re.message )
            )

    return to_return

def get_record(zone, module):
    to_return = None
    try:
        to_return = zone.loadRecord(
            module.params.get('name'),
            module.params.get('type').upper()
        )
    except ResourceException as re:
        if re.response.code != 404:
            module.fail_json(
                msg="error code %s - %s " % ( re.response.code, re.message )
            )
            to_return = None
    return to_return

def update(zone, record, module):
    cleaned_data = clean(record.data)
    changed = False
    args = {}
    for i in RECORD_KEYS:
        if (
            module.params.get(i) and
                (
                    not cleaned_data or
                    i not in cleaned_data or
                    module.params.get(i) != cleaned_data[i]
                )
            ):
            changed = True
            args[i] = module.params.get(i)

    if module.check_mode:
        # check mode short circuit before update
        module.exit_json(changed=changed)

    if changed:
        # update only if changed
        record = record.update(errback=errback_generator(module),**args)

    module.exit_json(changed=changed, id=record['id'], data=record.data)


def main():
    module = AnsibleModule(
        argument_spec           = dict(
            apiKey              = dict(required=True, no_log=True),
            name                = dict(required=True),
            zone                = dict(required=True),
            answers             = dict(required=True, type='list'),
            ignore_missing_zone = dict(required=False, default=False),
            type                = dict(
                                    required=True,
                                    choices=(
                                        list(map(lambda x:x.lower(),TYPES)) + TYPES)
                                    ),
            use_client_subnet   = dict(
                                    required=False,
                                    default=None,
                                    type='bool'
                                ),
            meta                = dict(required=False, default=None),
            link                = dict(required=False, default=None),
            filters             = dict(required=False, type='list', default=None),
            ttl                 = dict(
                                    required=False,
                                    type='int',
                                    default=3600
                                ),
            regions             = dict(required=False, default=None),
            state               = dict(
                                    required=False,
                                    default='present',
                                    choices=STATES
                                ),
            ),
        supports_check_mode=True
    )

    if not HAS_NS1:
        module.fail_json(msg='the ns1-python client lib is required for this module')

    config = Config()
    config.createFromAPIKey(module.params.get('apiKey'))
    config['transport'] = 'basic'
    ns1 = NS1(config=config)

    zone = get_zone(ns1, module)

    record = get_record(zone, module)

    # record found
    if record:
        if module.params.get('state') in DELETE_STATES:
            if module.check_mode:
                # short circut in check mode
                module.exit_json(changed=True)

            # we want it deleted
            record.delete(errback=errback_generator(module))
            module.exit_json(changed=True)
        else:
            update(zone, record, module)
    else:
        if module.params.get('state') in DELETE_STATES:
            module.exit_json(changed=False)
        else:
            if module.check_mode:
                # short circuit in check mode
                module.exit_json(changed=True)

            methodToCall = getattr(
                zone,
                'add_%s' % (module.params.get('type').upper())
            )

            record = methodToCall(
                module.params.get('name'),
                module.params.get('answers'),
                errback=errback_generator(module),
                **api_params(module)
            )
            module.exit_json(
                changed=True,
                id=record['id'],
                data=record.data
            )


from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
