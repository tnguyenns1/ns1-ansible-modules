#!/usr/bin/python
#
# (c) 2015, Che Ruisi-Besares <cruisibesares@nsone.net>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = """
module: ns1_zone
short_description: "Add, modify & delete nsone hosted zones."
description:
 - This module is a light wrapper around the nsone api that allows for the
   creation, modification, and deletion of nsone zone objects.
 - Additional record attributes can be passed to the module as documented below.
 - "See http://nsone.net/api/ for more details."
requirements:
  - "python >= 2.6"
  - ns1-python >= 0.9.18
version_added: "1.9.3"
author: "Che Ruisi-Besares"
options:
    state:
        description:
          - create or destroy the zone, defaults to present. There is no
            difference between present and active or absent and deleted.
          - Be aware that deleting a zone will remove all records.
        required: true
        choices: ['present', 'active', 'absent', 'deleted']
    apiKey:
        description:
          - Unique client api key that can be created via the nsone portal.
        required: true
    name:
        description:
          - The domain of the zone.
        required: true
    refresh:
        description:
          - SOA zone value.
        required: false
        default: None
    retry:
        description:
          - SOA zone value.
        required: false
        default: None
    expiry:
        description:
          - SOA zone value.
        required: false
        default: None
    next_ttl:
        description:
          - SOA zone value.
        required: false
        default: None
    link:
        description:
          - The domain this zone should be linked to. If you specify link only
            name, state and apiKey are allowed.
        required: false
        default: None
    networks:
        description:
          - If your account has access to multiple DNS networks, you may pass in
            networks, a list of network ids for which the zone should be made
            available.
        required: false
        default: None
    secondary:
        description:
          - To create a  secondary zone, you must include a secondary object.
        required: false
        default: None
    primary:
        description:
          - To enable slaving of your zone by third party DNS servers,
            you must include a primary object.
        required: false
        default: None
"""

EXAMPLES = '''
  - name: create zone
    local_action:
      module: ns1_zone
      apiKey: "{{ key }}"
      name: "{{ test_zone }}"
      state: present
      refresh: 200
    register: return

  - name: delete zone
    local_action:
      module: ns1_zone
      apiKey: "{{ key }}"
      name: "{{ test_zone }}"
      state: absent
    register: return

'''


try:
    from ns1 import NS1, Config
    from ns1.rest.errors import ResourceException
    HAS_NS1 = True
except ImportError:
    HAS_NS1 = False


CREATE_STATES = ['present', 'active']
DELETE_STATES = ['absent', 'deleted']

STATES = CREATE_STATES + DELETE_STATES

ZONE_KEYS = [
    'refresh',
    'retry',
    'expiry',
    'nx_ttl',
    'link',
    'networks',
    'secondary',
    'secondary_enabled',
    'primary_ip',
    'primary_port',
    'primary',
    'primary_enabled',
    'secondaries'
]


def errback_generator(module):
    def errback(args):
        module.fail_json(
            msg="%s - %s" % (args[0], args[1])
        )
    return errback


def api_params(module):
    toReturn = {}
    for i in ZONE_KEYS:
        if module.params.get(i) is not None:
            toReturn[i] = module.params.get(i)
    return toReturn


def get_zone(ns1, module):
    to_return = None
    try:
        to_return = ns1.loadZone(module.params.get('name'))
    except ResourceException as re:
        if re.response.code != 404:
            module.fail_json(
                msg="error code %s - %s " % (re.response.code, re.message)
            )
            to_return = None
    return to_return


def update(zone, module):
    changed = False
    args = {}
    for i in ZONE_KEYS:
        if (
            module.params.get(i) and
                (
                    not zone.data or
                    i not in zone.data or
                    module.params.get(i) != zone.data[i]
                )
            ):
            changed = True
            args[i] = module.params.get(i)

    if module.check_mode:
        # check mode short circut before update
        module.exit_json(changed=changed)

    if changed:
        # update only if changed
        zone = zone.update(errback=errback_generator(module), **args)

    module.exit_json(changed=changed, id=zone['id'], data=zone.data)


def main():
    module = AnsibleModule(
        argument_spec       = dict(
            apiKey          = dict(required=True, no_log=True),
            name            = dict(required=True),
            refresh         = dict(required=False, type='int', default=None),
            retry           = dict(required=False, type='int', default=None),
            expiry          = dict(required=False, type='int', default=None),
            nx_ttl          = dict(required=False, type='int', default=None),
            link            = dict(required=False, default=None),
            networks        = dict(required=False, default=None),
            secondary       = dict(required=False, default=None),
            primary         = dict(required=False, default=None),
            state           = dict(
                                required=False,
                                default='present',
                                choices=STATES
                                ),
            ),
        supports_check_mode=True,
        mutually_exclusive=[
            [ 'link', 'networks' ],
            [ 'link', 'retry' ],
            [ 'link', 'expiry' ],
            [ 'link', 'nx_ttl' ],
            [ 'link', 'secondary' ],
            [ 'link', 'primary' ],
            [ 'link', 'refresh' ]
        ]
    )

    if not HAS_NS1:
        module.fail_json(msg='the ns1-python client lib is required for this module')

    config = Config()
    config.createFromAPIKey(module.params.get('apiKey'))
    config['transport'] = 'basic'
    ns1 = NS1(config=config)

    zone = get_zone(ns1, module)

    # zone found
    if zone:
        if module.params.get('state') in DELETE_STATES:
            if module.check_mode:
                # short circut in check mode
                module.exit_json(changed=True)

            # we want it deleted
            zone.delete(errback=errback_generator(module))
            module.exit_json(changed=True)
        else:
            # we want to update it if changed
            update(zone, module)
    else:
        if module.params.get('state') in DELETE_STATES:
            module.exit_json(changed=False)
        else:
            if module.check_mode:
                # short circut in check mode
                module.exit_json(changed=True)
            zone = ns1.createZone(
                module.params.get('name'),
                errback=errback_generator(module),
                **api_params(module)
            )
            module.exit_json(changed=True, id=zone['id'], data=zone.data)

from ansible.module_utils.basic import *

if __name__ == '__main__':
    main()
